diff -ur ZThread-2.2.6/include/zthread/Barrier.h ZThread-2.2.6.throwaway/include/zthread/Barrier.h
--- ZThread-2.2.6/include/zthread/Barrier.h	Sun Jun  2 06:11:27 2002
+++ ZThread-2.2.6.throwaway/include/zthread/Barrier.h	Sun Jun 16 13:09:08 2002
@@ -73,7 +73,7 @@
 public:
 
   //! Create a Barrier
-  Barrier() throw(Synchronization_Exception) : 
+  Barrier() /* throw(Synchronization_Exception) */ : 
     _broken(false), _count(Count), _generation(0), _arrived(_lock), _command(0) { }
 
   /**
@@ -82,7 +82,7 @@
    *
    * @param command Runnable to associate with this Barrier
    */
-  Barrier(Runnable* command) throw(Synchronization_Exception) : 
+  Barrier(Runnable* command) /* throw(Synchronization_Exception) */ : 
     _broken(false), _count(Count), _generation(0), _arrived(_lock), _command(command) { }
 
   //! Destroy this Barrier
@@ -103,7 +103,7 @@
    * is thrown
    */
   virtual void wait() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     
@@ -199,7 +199,7 @@
    * is thrown
    */
   virtual bool wait(unsigned long timeout) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     
@@ -290,7 +290,7 @@
    * BrokenBarrier_Exception
    */
   void shatter() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
      
     Guard<LockType> g(_lock);   
 
@@ -308,7 +308,7 @@
    * @post the Barrier is no longer Broken and can be used again.
    */
   void reset() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
      
     Guard<LockType> g(_lock);   
 
diff -ur ZThread-2.2.6/include/zthread/BiasedRWLock.h ZThread-2.2.6.throwaway/include/zthread/BiasedRWLock.h
--- ZThread-2.2.6/include/zthread/BiasedRWLock.h	Thu Apr  4 05:52:43 2002
+++ ZThread-2.2.6.throwaway/include/zthread/BiasedRWLock.h	Sun Jun 16 13:09:19 2002
@@ -50,7 +50,7 @@
    * Create a new RWLock that has a bias toward writers.
    */
   BiasedRWLock()
-    throw(Synchronization_Exception) : RWLock() {}
+    /* throw(Synchronization_Exception) */ : RWLock() {}
 
   /**
    * Destroy the RWLock
diff -ur ZThread-2.2.6/include/zthread/BlockingQueue.h ZThread-2.2.6.throwaway/include/zthread/BlockingQueue.h
--- ZThread-2.2.6/include/zthread/BlockingQueue.h	Sun Jun  2 08:39:17 2002
+++ ZThread-2.2.6.throwaway/include/zthread/BlockingQueue.h	Sun Jun 16 13:10:42 2002
@@ -58,7 +58,7 @@
 public:
 
   //! Create a new BlockingQueue
-  BlockingQueue() throw(Synchronization_Exception) : _canceled(false) {}
+  BlockingQueue() /* throw(Synchronization_Exception) */ : _canceled(false) {}
 
   //! Destroy this BlockingQueue, delete remaining items
   virtual ~BlockingQueue() throw() {
@@ -86,7 +86,7 @@
    * be awakend if no exception is thrown
    */
   virtual void add(T item) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     
@@ -118,7 +118,7 @@
    * be awakend if no exception is thrown and the method returns true
    */
   virtual bool add(T item, unsigned long timeout) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     try {
 
@@ -154,7 +154,7 @@
    * blocked by an empty() or size() method will be awakend.
    */
   virtual T next()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
 
@@ -191,7 +191,7 @@
    * blocked by an empty() or size() method will be awakend.
    */
   virtual T next(unsigned long timeout)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock, timeout);
 
@@ -223,7 +223,7 @@
    * they will awakend
    */
   virtual void cancel()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
 
@@ -243,7 +243,7 @@
    * @see Queue::isCanceled()
    */
   virtual bool isCanceled()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     // Faster check since the queue will not become un-canceled
     if(_canceled)
@@ -266,7 +266,7 @@
    * @see Queue::size()
    */
   virtual size_t size()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     return _queue.size();
@@ -284,7 +284,7 @@
    * @see Queue::size(unsigned long)
    */
   virtual size_t size(unsigned long timeout)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock, timeout);
     return _queue.size();
diff -ur ZThread-2.2.6/include/zthread/BoundedQueue.h ZThread-2.2.6.throwaway/include/zthread/BoundedQueue.h
--- ZThread-2.2.6/include/zthread/BoundedQueue.h	Sun Jun  2 08:38:07 2002
+++ ZThread-2.2.6.throwaway/include/zthread/BoundedQueue.h	Sun Jun 16 13:12:12 2002
@@ -75,7 +75,7 @@
    * 
    * @param int capacity
    */
-  BoundedQueue(unsigned int capacity) throw(Synchronization_Exception) 
+  BoundedQueue(unsigned int capacity) /* throw(Synchronization_Exception) */ 
     :  _capacity(capacity), _canceled(false) { }
   
   //! Destroy this Queueand any remaining items 
@@ -117,7 +117,7 @@
    * be awakend if no exception is thrown
    */
   virtual void add(T item) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */{
 
     Guard<LockType> g(_lock);
       
@@ -154,7 +154,7 @@
    * be awakend if no exception is thrown
    */
   virtual void add(T item, unsigned long timeout) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock, timeout);
       
@@ -190,7 +190,7 @@
    * blocked by an empty() or size() method will be awakend.
    */
   virtual T next() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
     
     Guard<LockType> g(_lock);
       
@@ -230,7 +230,7 @@
    * blocked by an empty() method will be awakend.
    */
   virtual T next(unsigned long timeout)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock, timeout);
     
@@ -267,7 +267,7 @@
    * they will awakend
    */
   virtual void cancel() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
 
@@ -287,7 +287,7 @@
    * @see Queue::isCanceled()
    */
   virtual bool isCanceled()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     // Faster check since the Queue will not become un-canceled
     if(_canceled)
@@ -310,7 +310,7 @@
    * @see Queue::size()
    */
   virtual size_t size()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     return _queue.size();
@@ -330,7 +330,7 @@
    * @see Queue::size(unsigned long)
    */
   virtual size_t size(unsigned long timeout)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock, timeout);
     return _queue.size();
@@ -356,7 +356,7 @@
    * @see Queue::empty()
    */
   virtual bool empty() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
 
     Guard<LockType> g(_lock);
@@ -390,7 +390,7 @@
    * @see Queue::empty(unsigned long)
    */
   virtual bool empty(unsigned long timeout) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
 
     Guard<LockType> g(_lock, timeout);
diff -ur ZThread-2.2.6/include/zthread/Cancelable.h ZThread-2.2.6.throwaway/include/zthread/Cancelable.h
--- ZThread-2.2.6/include/zthread/Cancelable.h	Sun Jun  2 07:13:37 2002
+++ ZThread-2.2.6.throwaway/include/zthread/Cancelable.h	Sun Jun 16 13:12:29 2002
@@ -87,7 +87,7 @@
    * canceled state. 
    */
   virtual void cancel()
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
   /**
    * Determine if a Cancelaeble object has been cancel()ed.
@@ -99,7 +99,7 @@
    * cancel()ing the object.
    */
   virtual bool isCanceled()
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
 };
 
diff -ur ZThread-2.2.6/include/zthread/CancelableTask.h ZThread-2.2.6.throwaway/include/zthread/CancelableTask.h
--- ZThread-2.2.6/include/zthread/CancelableTask.h	Sun Jun  2 09:24:17 2002
+++ ZThread-2.2.6.throwaway/include/zthread/CancelableTask.h	Sun Jun 16 13:12:52 2002
@@ -92,7 +92,7 @@
    * and an interrupt() left over from a CancelableTask. 
    */
   virtual void cancel()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     if(_canceled)
       throw InvalidOp_Exception();
@@ -116,7 +116,7 @@
    * @return bool true if the task has been canceled
    */
   virtual bool isCanceled()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     if(_canceled)
       return true;
diff -ur ZThread-2.2.6/include/zthread/ClassLockable.h ZThread-2.2.6.throwaway/include/zthread/ClassLockable.h
--- ZThread-2.2.6/include/zthread/ClassLockable.h	Thu May 30 15:08:19 2002
+++ ZThread-2.2.6.throwaway/include/zthread/ClassLockable.h	Sun Jun 16 13:13:39 2002
@@ -54,15 +54,16 @@
   
   //! acquire() the ClassLockable
   virtual void acquire() 
-    throw(Synchronization_Exception) { _instance.acquire(); }
+    /* throw(Synchronization_Exception) */ { _instance.acquire(); }
 
   //! tryAcquire() the ClassLockable
   virtual bool tryAcquire(unsigned long timeout) 
-    throw(Synchronization_Exception) { return _instance.tryAcquire(timeout); }
+    /* throw(Synchronization_Exception) */
+    { return _instance.tryAcquire(timeout); }
 
   //! release() the ClassLockable
   virtual void release() 
-    throw(Synchronization_Exception) { _instance.release(); }
+    /* throw(Synchronization_Exception) */ { _instance.release(); }
 
 };
 
diff -ur ZThread-2.2.6/include/zthread/ConcurrentExecutor.h ZThread-2.2.6.throwaway/include/zthread/ConcurrentExecutor.h
--- ZThread-2.2.6/include/zthread/ConcurrentExecutor.h	Mon Jun 10 07:16:06 2002
+++ ZThread-2.2.6.throwaway/include/zthread/ConcurrentExecutor.h	Sun Jun 16 13:14:22 2002
@@ -111,7 +111,7 @@
 
   //! Create a new ConcurrentExecutor
   ConcurrentExecutor()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     _thread = Singleton<FactoryType>::instance()->create();
     _thread->setDaemon(true);
@@ -140,7 +140,7 @@
    * @see Executor::execute(RunnableHandle&)
    */
   virtual void execute(const RunnableHandle& task)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     // Canceled Executors will not accept new tasks
     if(_queue->isCanceled()) 
@@ -157,7 +157,7 @@
    * @see Executor::execute(const RunnableHandle&)
    */
   void execute(Runnable* task)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     execute( RunnablePtr(task) );
 
@@ -168,7 +168,7 @@
    * @see Executor::cancel()
    */
   virtual void cancel() 
-    throw(Synchronization_Exception) { 
+    /* throw(Synchronization_Exception) */ { 
       
       _queue->cancel(); 
 
@@ -178,7 +178,7 @@
    * @see Executor::isCancel()
    */
   virtual bool isCanceled()
-    throw(Synchronization_Exception) { 
+    /* throw(Synchronization_Exception) */ { 
 
       return _queue->isCanceled(); 
 
@@ -188,7 +188,7 @@
    * @see Executor::wait()
    */
   virtual void wait() 
-    throw(Synchronization_Exception) { 
+    /* throw(Synchronization_Exception) */ { 
       
     _queue->empty();
       
@@ -198,7 +198,7 @@
    * @see Executor::wait(unsigned long)
    */
   virtual bool wait(unsigned long timeout) 
-    throw(Synchronization_Exception) { 
+    /* throw(Synchronization_Exception) */ { 
 
       return _queue->empty(timeout); 
 
diff -ur ZThread-2.2.6/include/zthread/Condition.h ZThread-2.2.6.throwaway/include/zthread/Condition.h
--- ZThread-2.2.6/include/zthread/Condition.h	Sun Jun  2 06:10:20 2002
+++ ZThread-2.2.6.throwaway/include/zthread/Condition.h	Sun Jun 16 13:15:13 2002
@@ -77,7 +77,7 @@
    * creating the Condition object
    */
   Condition(Lockable& l) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   //! Destroy Condition object
   ~Condition()
@@ -92,7 +92,7 @@
    * performing this operation
    */
   void signal() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Wake <i>ALL</i> threads wait()ing on this Condition.
@@ -103,7 +103,7 @@
    * performing this operation
    */
   void broadcast() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
 
   /**
@@ -125,7 +125,7 @@
    * @see Waitable::wait()
    */
   virtual void wait() 
-    throw(Synchronization_Exception);   
+    /* throw(Synchronization_Exception) */;   
 
   /**
    * Wait for this Condition object to be signal()ed. The thread calling this method
@@ -152,7 +152,7 @@
    * @see Waitable::wait(timeout)
    */
   virtual bool wait(unsigned long timeout) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   
 };
diff -ur ZThread-2.2.6/include/zthread/CountingSemaphore.h ZThread-2.2.6.throwaway/include/zthread/CountingSemaphore.h
--- ZThread-2.2.6/include/zthread/CountingSemaphore.h	Sun Jun  2 06:12:01 2002
+++ ZThread-2.2.6.throwaway/include/zthread/CountingSemaphore.h	Sun Jun 16 13:16:13 2002
@@ -65,7 +65,7 @@
    * be created
    */
   CountingSemaphore(int initialCount = 0) 
-    throw(Synchronization_Exception);
+    /*throw(Synchronization_Exception) */;
 
   //! Destroy the CountingSemaphore
   virtual ~CountingSemaphore() throw();
@@ -77,7 +77,8 @@
    * semantics
    */ 
   void wait() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
+
 
   /**
    * Decrement the count.
@@ -86,7 +87,7 @@
    * semantics
    */
   bool tryWait(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Increment the count.
@@ -95,7 +96,7 @@
    * semantics
    */
   void post() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   /**
    * Get the current count of the semaphore. This value may change immediately
@@ -123,7 +124,7 @@
    * @see Lockable::tryAcquire(unsigned long)
    */
   virtual bool tryAcquire(unsigned long timeout)  
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Decrement the count, blocking that calling thread if the count becomes 0 or 
@@ -137,7 +138,7 @@
    * @see Lockable::acquire()
    */
   virtual void acquire() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Increment the count, unblocking one thread if count is posative.
@@ -147,7 +148,7 @@
    * @see Lockable::release()
    */
   virtual void release() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   
 }; 
diff -ur ZThread-2.2.6/include/zthread/DefaultThreadFactory.h ZThread-2.2.6.throwaway/include/zthread/DefaultThreadFactory.h
--- ZThread-2.2.6/include/zthread/DefaultThreadFactory.h	Fri May 31 11:40:52 2002
+++ ZThread-2.2.6.throwaway/include/zthread/DefaultThreadFactory.h	Sun Jun 16 13:16:26 2002
@@ -54,7 +54,7 @@
    * @exception Synchronization_Exception thrown if a new Thread
    * cannot be created.
    */
-  virtual Thread* create() throw(Synchronization_Exception) {
+  virtual Thread* create() /* throw(Synchronization_Exception) */ {
     return new Thread();
   }
 
diff -ur ZThread-2.2.6/include/zthread/Executor.h ZThread-2.2.6.throwaway/include/zthread/Executor.h
--- ZThread-2.2.6/include/zthread/Executor.h	Tue Jun  4 05:49:11 2002
+++ ZThread-2.2.6.throwaway/include/zthread/Executor.h	Sun Jun 16 13:43:17 2002
@@ -104,20 +104,19 @@
    * @exception Synchronization_Exception thrown is some other error occurs.
    */
   virtual void execute(const RunnableHandle& task)
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
   
   /**
    * Convience method
    *
    * @see Executor::execute(const RunnableHandle&)
-   *
+   */
   void execute(Runnable* task)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     execute( RunnablePtr(task) );
 
   }
-  */
 
   /**
    * Stop the execution of additonal tasks by this Executor.
@@ -129,7 +128,7 @@
    * @post the Executor no longer accepts new tasks.
    */
   virtual void cancel() 
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
 
   /**
@@ -150,7 +149,7 @@
    * error.
    */
   virtual void wait()
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
   /**
    * Wait for all pending and currently executing tasks to complete or
@@ -176,7 +175,7 @@
    * error.
    */
   virtual bool wait(unsigned long)
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
 };
 
diff -ur ZThread-2.2.6/include/zthread/FairRWLock.h ZThread-2.2.6.throwaway/include/zthread/FairRWLock.h
--- ZThread-2.2.6/include/zthread/FairRWLock.h	Thu Apr  4 05:52:31 2002
+++ ZThread-2.2.6.throwaway/include/zthread/FairRWLock.h	Sun Jun 16 13:17:20 2002
@@ -50,7 +50,7 @@
    * Create a fair or somewhat balanced RWLock
    */
   FairRWLock()
-    throw(Synchronization_Exception) : RWLock() {}
+    /* throw(Synchronization_Exception) */ : RWLock() {}
 
   /**
    * Destroy this RWLock
diff -ur ZThread-2.2.6/include/zthread/FastMutex.h ZThread-2.2.6.throwaway/include/zthread/FastMutex.h
--- ZThread-2.2.6/include/zthread/FastMutex.h	Thu May 30 13:38:35 2002
+++ ZThread-2.2.6.throwaway/include/zthread/FastMutex.h	Sun Jun 16 13:17:52 2002
@@ -61,7 +61,7 @@
   
   //! Create a new FastMutex
   FastMutex() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   //! Destroy a new FastMutex
   virtual ~FastMutex() 
@@ -75,7 +75,7 @@
    * @pre the caller should <i>not</i> have previously acquire()d this lock
    */
   virtual void acquire() 
-    throw(Synchronization_Exception); 
+    /* throw(Synchronization_Exception) */; 
   
   /**
    * Release exclusive access. No safety or state checks are performed.
@@ -85,7 +85,7 @@
    * @pre the caller should have previously acquire()d this lock
    */
   virtual void release() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   /**
    * Try to acquire exclusive access. No safety or state checks are performed.
@@ -99,7 +99,7 @@
    * @pre the caller should <i>not</i> have previously acquire()d this lock
    */
   virtual bool tryAcquire(unsigned long timeout)
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
 }; /* FastMutex */
 
diff -ur ZThread-2.2.6/include/zthread/FastRecursiveMutex.h ZThread-2.2.6.throwaway/include/zthread/FastRecursiveMutex.h
--- ZThread-2.2.6/include/zthread/FastRecursiveMutex.h	Thu May 30 13:41:19 2002
+++ ZThread-2.2.6.throwaway/include/zthread/FastRecursiveMutex.h	Sun Jun 16 13:18:20 2002
@@ -62,7 +62,7 @@
   
   //! Create a new FastRecursiveMutex
   FastRecursiveMutex() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   //! Destroy this FastRecursiveMutex
   virtual ~FastRecursiveMutex() throw();
@@ -75,7 +75,7 @@
    * @pre the caller should <i>not</i> have previously acquire()d this lock
    */
   virtual void acquire() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Release exclusive access. No safety or state checks are performed.
@@ -88,7 +88,7 @@
    * @pre the caller should have previously acquire()d this lock
    */
   virtual void release() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   /**
    * Try to acquire exclusive access. No safety or state checks are performed.
@@ -100,7 +100,7 @@
    * @exception Synchronization_Exception never thrown
    */
   virtual bool tryAcquire(unsigned long timeout=0)
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
 }; 
 
diff -ur ZThread-2.2.6/include/zthread/Future.h ZThread-2.2.6.throwaway/include/zthread/Future.h
--- ZThread-2.2.6/include/zthread/Future.h	Mon Jun 10 07:21:16 2002
+++ ZThread-2.2.6.throwaway/include/zthread/Future.h	Sun Jun 16 13:18:36 2002
@@ -244,7 +244,7 @@
    * @see Waitable::wait()
    */
   virtual void wait() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     _result->_cond.wait();
 
@@ -258,7 +258,7 @@
    * @see Waitable::wait(unsigned long)
    */
   virtual bool wait(unsigned long timeout) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     return _result->_cond.wait(timeout);
 
diff -ur ZThread-2.2.6/include/zthread/Lockable.h ZThread-2.2.6.throwaway/include/zthread/Lockable.h
--- ZThread-2.2.6/include/zthread/Lockable.h	Thu May 30 13:28:51 2002
+++ ZThread-2.2.6.throwaway/include/zthread/Lockable.h	Sun Jun 16 13:19:21 2002
@@ -75,7 +75,7 @@
    * @post The Lockable is safely acquired if no exception is thrown. 
    */
   virtual void acquire() 
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
 
   /** 
@@ -97,7 +97,7 @@
    * attempting to acquire this Lockable.
    */
   virtual bool tryAcquire(unsigned long) 
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
   
   /** 
    * Release the Lockable object.
@@ -113,7 +113,7 @@
    * @post The Lockable is safely released if no exception is thrown. 
    */    
   virtual void release() 
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
 };
 
diff -ur ZThread-2.2.6/include/zthread/LockedQueue.h ZThread-2.2.6.throwaway/include/zthread/LockedQueue.h
--- ZThread-2.2.6/include/zthread/LockedQueue.h	Mon Jun 10 05:02:13 2002
+++ ZThread-2.2.6.throwaway/include/zthread/LockedQueue.h	Sun Jun 16 13:20:15 2002
@@ -53,7 +53,7 @@
 public:
 
   //! Create a LockedQueue
-  LockedQueue() throw(Synchronization_Exception) : _canceled(false) {}
+  LockedQueue() /* throw(Synchronization_Exception) */: _canceled(false) {}
 
   //! Destroy a LockedQueue
   virtual ~LockedQueue() throw() {
@@ -78,7 +78,7 @@
    * @see Queue::add(T)
    */
   virtual void add(T item) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     
@@ -105,7 +105,7 @@
    * @see Queue::add(T, unsigned long)
    */
   virtual bool add(T item, unsigned long timeout) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     try {
 
@@ -135,7 +135,7 @@
    * @see Queue::next()
    */
   virtual T next()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
 
@@ -167,7 +167,7 @@
    * @see Queue::next(unsigned long)
    */
   virtual T next(unsigned long timeout)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock, timeout);
 
@@ -194,7 +194,7 @@
    * @see Queue::cancel()
    */
   virtual void cancel()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
 
@@ -213,7 +213,7 @@
    * @see Queue::isCanceled()
    */
   virtual bool isCanceled()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
     
     // Faster check since the queue will not become un-canceled
     if(_canceled)
@@ -237,7 +237,7 @@
    * @see Queue::size()
    */
   virtual size_t size()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     return _queue.size();
@@ -256,7 +256,7 @@
    * @see Queue::size(unsigned long)
    */
   virtual size_t size(unsigned long timeout)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock, timeout);
     return _queue.size();
diff -ur ZThread-2.2.6/include/zthread/MonitoredQueue.h ZThread-2.2.6.throwaway/include/zthread/MonitoredQueue.h
--- ZThread-2.2.6/include/zthread/MonitoredQueue.h	Sun Jun  2 10:40:56 2002
+++ ZThread-2.2.6.throwaway/include/zthread/MonitoredQueue.h	Sun Jun 16 13:21:32 2002
@@ -62,7 +62,7 @@
 public:
 
   //! Create a new MonitoredQueue
-  MonitoredQueue() throw(Synchronization_Exception)
+  MonitoredQueue() /* throw(Synchronization_Exception) */
     : _notEmpty(_lock), _isEmpty(_lock), _canceled(false) {}
 
   //! Destroy a MonitoredQueue, delete remaining items
@@ -91,7 +91,7 @@
    * be awakend if no exception is thrown
    */
   virtual void add(T item) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     
@@ -124,7 +124,7 @@
    * be awakend if no exception is thrown and the method returns true
    */
   virtual bool add(T item, unsigned long timeout) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     try {
 
@@ -160,7 +160,7 @@
    * blocked by an empty() or size() method will be awakend.
    */
   virtual T next()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
       
@@ -199,7 +199,7 @@
    * blocked by an empty() method will be awakend.
    */
   virtual T next(unsigned long timeout)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock, timeout);
       
@@ -236,7 +236,7 @@
    * they will awakend
    */
   virtual void cancel() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
 
@@ -257,7 +257,7 @@
    * @see Queue::isCanceled()
    */
   virtual bool isCanceled()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     // Faster check since the queue will not become un-canceled
     if(_canceled)
@@ -281,7 +281,7 @@
    * @see Queue::size()
    */
   virtual size_t size()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     return _queue.size();
@@ -301,7 +301,7 @@
    * @see Queue::size(unsigned long)
    */
   virtual size_t size(unsigned long timeout)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock, timeout);
     return _queue.size();
@@ -327,7 +327,7 @@
    * @see Queue::empty()
    */
   virtual bool empty() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
 
     Guard<LockType> g(_lock);
@@ -361,7 +361,7 @@
    * @see Queue::empty(unsigned long)
    */
   virtual bool empty(unsigned long timeout) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
 
     Guard<LockType> g(_lock, timeout);
diff -ur ZThread-2.2.6/include/zthread/Mutex.h ZThread-2.2.6.throwaway/include/zthread/Mutex.h
--- ZThread-2.2.6/include/zthread/Mutex.h	Sun Jun  2 06:10:54 2002
+++ ZThread-2.2.6.throwaway/include/zthread/Mutex.h	Sun Jun 16 13:22:04 2002
@@ -68,7 +68,7 @@
 
   //! Create a new Mutex.
   Mutex() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   //! Destroy this Mutex.
   virtual ~Mutex() throw();
@@ -92,7 +92,7 @@
    * @see Lockable::acquire()
    */
   virtual void acquire() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Acquire a Mutex, possbily blocking until the the current owner of the 
@@ -119,7 +119,7 @@
    * @see Lockable::tryAcquire(unsigned long)
    */
   virtual bool tryAcquire(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   /**
    * Release a Mutex allowing another thread to acquire() it.
@@ -136,7 +136,7 @@
    * @see Lockable::acquire()
    */
   virtual void release() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
 };
 
diff -ur ZThread-2.2.6/include/zthread/NullLockable.h ZThread-2.2.6.throwaway/include/zthread/NullLockable.h
--- ZThread-2.2.6/include/zthread/NullLockable.h	Thu May 30 17:56:19 2002
+++ ZThread-2.2.6.throwaway/include/zthread/NullLockable.h	Sun Jun 16 13:22:30 2002
@@ -42,7 +42,7 @@
   public:
 
   //! Create a new NullLockable
-  inline NullLockable() throw(Synchronization_Exception) {}
+  inline NullLockable() /* throw(Synchronization_Exception) */ {}
 
   //! Destroy a NullLockable
   inline virtual ~NullLockable() throw() {}
@@ -53,7 +53,7 @@
    * @exception Synchronization_Exception never thrown
    */
   inline virtual void acquire() 
-    throw(Synchronization_Exception) {}
+    /* throw(Synchronization_Exception) */ {}
 
   /**
    * Do nothing
@@ -63,7 +63,7 @@
    * @exception Synchronization_Exception never thrown
    */
   inline virtual bool tryAcquire(unsigned long) 
-    throw(Synchronization_Exception) { return false; }
+    /* throw(Synchronization_Exception) */ { return false; }
   
   /**
    * Do nothing
@@ -71,7 +71,7 @@
    * @exception Synchronization_Exception never thrown
    */
   inline virtual void release() 
-    throw(Synchronization_Exception) {}
+    /* throw(Synchronization_Exception) */ {}
   
 }; 
 
diff -ur ZThread-2.2.6/include/zthread/PoolExecutor.h ZThread-2.2.6.throwaway/include/zthread/PoolExecutor.h
--- ZThread-2.2.6/include/zthread/PoolExecutor.h	Mon Jun 10 07:16:16 2002
+++ ZThread-2.2.6.throwaway/include/zthread/PoolExecutor.h	Sun Jun 16 13:23:48 2002
@@ -128,7 +128,8 @@
    * @param min - minimum number of threads to service tasks with
    */
   PoolExecutor(unsigned int min)
-    throw(Synchronization_Exception) : _min(min), _max(min), _canceled(false) {}
+    /* throw(Synchronization_Exception) */ 
+    : _min(min), _max(min), _canceled(false) {}
 
   /**
    * Create a new PoolExecutor
@@ -137,7 +138,8 @@
    * @param max - maximum number of threads to service tasks with
    */
   PoolExecutor(unsigned int min, unsigned int max)
-    throw(Synchronization_Exception) : _min(min), _max(max), _canceled(false) {}
+    /* throw(Synchronization_Exception) */
+    : _min(min), _max(max), _canceled(false) {}
 
   /**
    * Change the maximum number of threads in the pool. As tasks are
@@ -149,7 +151,7 @@
    * @exception Interrupted_Exception
    */
   void setMax(unsigned int max)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     _max = max;
@@ -168,7 +170,7 @@
    * @exception Interrupted_Exception
    */
   void setMin(unsigned int)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     _min = min;
@@ -183,7 +185,7 @@
    * @exception Interrupted_Exception
    */
   unsigned int getMax()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     return _max;
@@ -198,7 +200,7 @@
    * @exception Interrupted_Exception
    */
   unsigned int getMin()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<LockType> g(_lock);
     return _min;
@@ -226,7 +228,7 @@
    * @see Executor::execute(RunnableHandle&)
    */
   virtual void execute(const RunnableHandle& task)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     {
       
@@ -258,7 +260,7 @@
    * @see Executor::execute(const RunnableHandle&)
    */
   void execute(Runnable* task)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     execute( RunnablePtr(task) );
 
@@ -269,7 +271,7 @@
    * @see Executor::cancel()
    */
   virtual void cancel() 
-    throw(Synchronization_Exception) { 
+    /* throw(Synchronization_Exception) */ { 
 
     Guard<LockType> g(_lock);
 
@@ -282,7 +284,7 @@
    * @see Executor::isCanceled()
    */
   virtual bool isCanceled()
-    throw(Synchronization_Exception) { 
+    /* throw(Synchronization_Exception) */ { 
 
     Guard<LockType> g(_lock);
 
@@ -294,7 +296,7 @@
    * @see Executor::wait()
    */
   virtual void wait() 
-    throw(Synchronization_Exception) { 
+    /* throw(Synchronization_Exception) */ { 
       
     _queue->empty();
       
@@ -304,7 +306,7 @@
    * @see Executor::wait(unsigned long)
    */
   virtual bool wait(unsigned long timeout) 
-    throw(Synchronization_Exception) { 
+    /* throw(Synchronization_Exception) */ { 
 
       return _queue->empty(timeout); 
 
diff -ur ZThread-2.2.6/include/zthread/PriorityCondition.h ZThread-2.2.6.throwaway/include/zthread/PriorityCondition.h
--- ZThread-2.2.6/include/zthread/PriorityCondition.h	Sun Jun  2 06:11:02 2002
+++ ZThread-2.2.6.throwaway/include/zthread/PriorityCondition.h	Sun Jun 16 13:24:30 2002
@@ -60,7 +60,7 @@
    * creating the PriorityCondition object
    */
   PriorityCondition(Lockable& l) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   //! Destroy PriorityCondition object
   ~PriorityCondition()
@@ -75,7 +75,7 @@
    * performing this operation
    */
   void signal() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Wake <i>ALL</i> threads wait()ing on this PriorityCondition.
@@ -86,7 +86,7 @@
    * performing this operation
    */
   void broadcast() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
 
   /**
@@ -108,7 +108,7 @@
    * @see Waitable::wait()
    */
   virtual void wait() 
-    throw(Synchronization_Exception);   
+    /* throw(Synchronization_Exception) */;   
 
   /**
    * Wait for this PriorityCondition object to be signal()ed. The thread calling this method
@@ -135,7 +135,7 @@
    * @see Waitable::wait(timeout)
    */
   virtual bool wait(unsigned long timeout) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   
 };
diff -ur ZThread-2.2.6/include/zthread/PriorityInheritanceMutex.h ZThread-2.2.6.throwaway/include/zthread/PriorityInheritanceMutex.h
--- ZThread-2.2.6/include/zthread/PriorityInheritanceMutex.h	Sun Jun  2 06:10:44 2002
+++ ZThread-2.2.6.throwaway/include/zthread/PriorityInheritanceMutex.h	Sun Jun 16 13:24:59 2002
@@ -61,7 +61,7 @@
 
   //! Create a new PriorityInheritanceMutex.
   PriorityInheritanceMutex() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   //! Destroy this PriorityInheritanceMutex.
   virtual ~PriorityInheritanceMutex()
@@ -86,7 +86,7 @@
    * @see Lockable::acquire()
    */
   virtual void acquire() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Acquire a PriorityInheritanceMutex, possbily blocking until the the current owner of the 
@@ -113,7 +113,7 @@
    * @see Lockable::tryAcquire(unsigned long)
    */
   virtual bool tryAcquire(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   /**
    * Release a PriorityInheritanceMutex allowing another thread to acquire() it.
@@ -130,7 +130,7 @@
    * @see Lockable::acquire()
    */
   virtual void release() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
 }; 
 
diff -ur ZThread-2.2.6/include/zthread/PriorityMutex.h ZThread-2.2.6.throwaway/include/zthread/PriorityMutex.h
--- ZThread-2.2.6/include/zthread/PriorityMutex.h	Sun Jun  2 06:10:49 2002
+++ ZThread-2.2.6.throwaway/include/zthread/PriorityMutex.h	Sun Jun 16 13:25:41 2002
@@ -54,7 +54,7 @@
 
   //! Create a PriorityMutex
   PriorityMutex() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   //! Destroy this PriorityMutex
   virtual ~PriorityMutex()
@@ -79,7 +79,7 @@
    * @see Lockable::acquire()
    */
   virtual void acquire() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Acquire a PriorityMutex, possbily blocking until the the current owner of the 
@@ -106,7 +106,7 @@
    * @see Lockable::tryAcquire(unsigned long)
    */
   virtual bool tryAcquire(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   /**
    * Release a PriorityMutex allowing another thread to acquire() it.
@@ -123,7 +123,7 @@
    * @see Lockable::acquire()
    */
   virtual void release() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
 }; 
 
diff -ur ZThread-2.2.6/include/zthread/PrioritySemaphore.h ZThread-2.2.6.throwaway/include/zthread/PrioritySemaphore.h
--- ZThread-2.2.6/include/zthread/PrioritySemaphore.h	Sun Jun  2 06:11:08 2002
+++ ZThread-2.2.6.throwaway/include/zthread/PrioritySemaphore.h	Sun Jun 16 13:26:27 2002
@@ -64,7 +64,7 @@
    * be created
    */
   PrioritySemaphore(int count = 1, unsigned int maxCount = 1) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   //! Destroy the PrioritySemaphore
   virtual ~PrioritySemaphore()
@@ -77,7 +77,7 @@
    * semantics
    */ 
   void wait() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Decrement the count.
@@ -86,7 +86,7 @@
    * semantics
    */
   bool tryWait(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Increment the count.
@@ -95,7 +95,7 @@
    * semantics
    */
   void post() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   /**
    * Get the current count of the semaphore. This value may change immediately
@@ -122,7 +122,7 @@
    * @see Lockable::tryAcquire(unsigned long)
    */
   virtual bool tryAcquire(unsigned long timeout) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Decrement the count, blocking that calling thread if the count becomes 0 or 
@@ -136,7 +136,7 @@
    * @see Lockable::acquire()
    */
   virtual void acquire() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Increment the count, unblocking one thread if count is posative.
@@ -148,7 +148,7 @@
    * @see Lockable::release()
    */
   virtual void release() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   
 }; 
diff -ur ZThread-2.2.6/include/zthread/Queue.h ZThread-2.2.6.throwaway/include/zthread/Queue.h
--- ZThread-2.2.6/include/zthread/Queue.h	Sat Jun  1 15:37:24 2002
+++ ZThread-2.2.6.throwaway/include/zthread/Queue.h	Sun Jun 16 13:27:23 2002
@@ -65,7 +65,7 @@
    * adding the item to the Queue
    */
   virtual void add(T item)
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
   /**
    * Add an object to this Queue, tranfering the ownership of that
@@ -91,7 +91,7 @@
    * adding the item to the Queue
    */
   virtual bool add(T item, unsigned long timeout)
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
 
   /**
@@ -112,7 +112,7 @@
    * adding the item to the Queue
    */
   virtual T next()
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
   /**
    * Get an object from this Queue, transfering the ownership of that
@@ -137,7 +137,7 @@
    * adding the item to the Queue
    */
   virtual T next(unsigned long timeout)
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
 
   /**
@@ -158,7 +158,8 @@
    * cancel()ing the Queue.
    */
   virtual void cancel()
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
+
 
   /**
    * Count the items present in this Queue. 
@@ -175,7 +176,7 @@
    * counting the items.
    */
   virtual size_t size()
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
   /**
    * Count the items present in this Queue. 
@@ -201,7 +202,7 @@
    * counting the items.
    */
   virtual size_t size(unsigned long timeout)
-    throw(Synchronization_Exception) = 0;
+    /* throw(Synchronization_Exception) */ = 0;
 
 
   /**
@@ -217,7 +218,7 @@
    * @see Queue::size()
    */
   virtual bool empty()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     try {
 
@@ -244,7 +245,7 @@
    * @see Queue::size(unsigned long)
    */
   virtual bool empty(unsigned long timeout)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     try {
 
diff -ur ZThread-2.2.6/include/zthread/RWLock.h ZThread-2.2.6.throwaway/include/zthread/RWLock.h
--- ZThread-2.2.6/include/zthread/RWLock.h	Tue May 28 18:19:52 2002
+++ ZThread-2.2.6.throwaway/include/zthread/RWLock.h	Sun Jun 16 13:39:41 2002
@@ -99,13 +99,13 @@
    * Called just prior to a read lock acquire()
    */
   virtual void beforeRead() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Called just prior to a write lock acquire()
    */
   virtual void beforeWrite() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Called just before a read lock tryAcquire()
@@ -113,7 +113,7 @@
    * @param long - timeout the read will be called with
    */
   virtual bool beforeRead(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Called just before a write lock tryAcquire()
@@ -121,20 +121,19 @@
    * @param long - timeout the write will be called with
    */
   virtual bool beforeWrite(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
-  
   /**
    * Called after a read lock is released
    */
   virtual void postRead() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Called after a write lock is released
    */
   virtual void postWrite()
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   public:
 
@@ -145,7 +144,7 @@
    * not be allocated
    */
   RWLock() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   /**
    * Destroy this RWLock
@@ -187,22 +186,22 @@
 
     //! Create write lock associated with a certain RWLock
     WLock(RWLock* l) 
-      throw(Synchronization_Exception) : _lock(l) {};
+      /* throw(Synchronization_Exception) */ : _lock(l) {};
     
     //! Destroy the write lock
     virtual ~WLock() throw() {}
     
     //! Release the write lock
     virtual void release()
-      throw(Synchronization_Exception) { _lock->postWrite();  }
+      /* throw(Synchronization_Exception) */ { _lock->postWrite();  }
     
     //! Acquire the write lock
     virtual void acquire()
-      throw(Synchronization_Exception) { _lock->beforeWrite(); }
+      /* throw(Synchronization_Exception) */ { _lock->beforeWrite(); }
 
     //! Acquire the write lock with a timeout
     virtual bool tryAcquire(unsigned long milliseconds) 
-      throw(Synchronization_Exception) { 
+      /* throw(Synchronization_Exception) */ { 
 
       return _lock->beforeWrite(milliseconds); 
 
@@ -228,22 +227,22 @@
 
     //! Create read lock associated with a certain RWLock
     RLock(RWLock *l) 
-      throw(Synchronization_Exception) : _lock(l) {}
+      /* throw(Synchronization_Exception) */ : _lock(l) {}
 
     //! Destroy the read lock
     virtual ~RLock() throw() {}
 
     //! Release the read lock
     virtual void release() 
-      throw(Synchronization_Exception) { _lock->postRead(); }
+      /* throw(Synchronization_Exception) */ { _lock->postRead(); }
     
     //! Acquire the read lock
     virtual void acquire() 
-      throw(Synchronization_Exception) { _lock->beforeRead(); }
+      /* throw(Synchronization_Exception) */ { _lock->beforeRead(); }
     
     //! Acquire the read lock with a timeout
     virtual bool tryAcquire(unsigned long milliseconds) 
-      throw(Synchronization_Exception) { 
+      /* throw(Synchronization_Exception) */ { 
       
       return _lock->beforeRead(milliseconds); 
 
diff -ur ZThread-2.2.6/include/zthread/RecursiveMutex.h ZThread-2.2.6.throwaway/include/zthread/RecursiveMutex.h
--- ZThread-2.2.6/include/zthread/RecursiveMutex.h	Sun Jun  2 06:11:19 2002
+++ ZThread-2.2.6.throwaway/include/zthread/RecursiveMutex.h	Sun Jun 16 13:29:02 2002
@@ -59,7 +59,7 @@
  public:
   
   //! Create a new RecursiveMutex.
-  RecursiveMutex() throw(Synchronization_Exception);
+  RecursiveMutex() /* throw(Synchronization_Exception) */;
 
   //! Destroy this RecursiveMutex.
   virtual ~RecursiveMutex()
@@ -81,7 +81,7 @@
    * @see Lockable::acquire()
    */
   virtual void acquire() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Acquire a RecursiveMutex, possbily blocking until the the current owner of the 
@@ -107,7 +107,7 @@
    * @see Lockable::tryAcquire(unsigned long)
    */
   virtual bool tryAcquire(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Release a RecursiveMutex allowing another thread to acquire() it.
@@ -124,7 +124,7 @@
    * @see Lockable::acquire()
    */
   virtual void release() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
 }; 
   
diff -ur ZThread-2.2.6/include/zthread/Semaphore.h ZThread-2.2.6.throwaway/include/zthread/Semaphore.h
--- ZThread-2.2.6/include/zthread/Semaphore.h	Sun Jun  2 06:11:14 2002
+++ ZThread-2.2.6.throwaway/include/zthread/Semaphore.h	Sun Jun 16 13:32:35 2002
@@ -74,7 +74,7 @@
    * be created
    */
   Semaphore(int count = 1, unsigned int maxCount = 1) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   //! Destroy the Semaphore
   virtual ~Semaphore()
@@ -87,7 +87,7 @@
    * semantics
    */ 
   void wait() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Decrement the count.
@@ -96,7 +96,7 @@
    * semantics
    */
   bool tryWait(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Increment the count.
@@ -105,7 +105,7 @@
    * semantics
    */
   void post() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   /**
    * Get the current count of the semaphore. This value may change immediately
@@ -132,7 +132,7 @@
    * @see Lockable::tryAcquire(unsigned long)
    */
   virtual bool tryAcquire(unsigned long timeout) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Decrement the count, blocking that calling thread if the count becomes 0 or 
@@ -146,7 +146,7 @@
    * @see Lockable::acquire()
    */
   virtual void acquire() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Increment the count, unblocking one thread if count is posative.
@@ -158,7 +158,7 @@
    * @see Lockable::release()
    */
   virtual void release() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   
 }; 
diff -ur ZThread-2.2.6/include/zthread/SynchronousExecutor.h ZThread-2.2.6.throwaway/include/zthread/SynchronousExecutor.h
--- ZThread-2.2.6/include/zthread/SynchronousExecutor.h	Tue Jun  4 05:51:29 2002
+++ ZThread-2.2.6.throwaway/include/zthread/SynchronousExecutor.h	Sun Jun 16 13:33:28 2002
@@ -71,7 +71,8 @@
    * @see Executor::execute(RunnableHandle&)
    */
   virtual void execute(const RunnableHandle& task)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
+
     
     // Canceled Executors will not accept new tasks, quick 
     // check to avoid excessive locking in the canceled state
@@ -95,7 +96,7 @@
    * @see Executor::execute(const RunnableHandle&)
    */
   void execute(Runnable* task)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     execute( RunnablePtr(task) );
 
@@ -106,7 +107,7 @@
    * @see Executor::cancel()
    */
   virtual void cancel() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
       
     Guard<LockType> g(_lock);
     _canceled = true;
@@ -117,7 +118,7 @@
    * @see Executor::isCanceled()
    */
   virtual bool isCanceled()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
     
     Guard<LockType> g(_lock);
     return _canceled;
@@ -128,7 +129,7 @@
    * @see Executor::wait()
    */
   virtual void wait() 
-    throw(Synchronization_Exception) { 
+    /* throw(Synchronization_Exception) */ { 
 
     if(Thread::interrupted())
       throw Interrupted_Exception();
@@ -141,7 +142,7 @@
    * @see Executor::wait(unsigned long)
    */
   virtual bool wait(unsigned long) 
-    throw(Synchronization_Exception) { 
+    /* throw(Synchronization_Exception) */ { 
 
     if(Thread::interrupted())
       throw Interrupted_Exception();
diff -ur ZThread-2.2.6/include/zthread/Thread.h ZThread-2.2.6.throwaway/include/zthread/Thread.h
--- ZThread-2.2.6/include/zthread/Thread.h	Mon Jun 10 04:58:29 2002
+++ ZThread-2.2.6.throwaway/include/zthread/Thread.h	Sun Jun 16 13:35:55 2002
@@ -264,7 +264,7 @@
    * @exception Initialization_Exception - thrown if there are not 
    * enough resources to do this
    */
-  Thread() throw(Synchronization_Exception);
+  Thread() /* throw(Synchronization_Exception) */;
   
   //! Destroy a Thread
   virtual ~Thread() throw();
@@ -302,7 +302,7 @@
    * @exception Interrupted_Exception thrown if the joining thread has been interrupt()ed
    */
   bool join(unsigned long timeout = 0) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * This can be implemented by subclasses to create a thread with 
@@ -322,7 +322,7 @@
    * starting the thread
    */
   void run(const RunnableHandle& task)
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Convience method
@@ -330,7 +330,7 @@
    * @see Thread::run(const RunnableHandle&)
    */
   void run(Runnable* task)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     run( RunnablePtr(task) );
 
@@ -346,7 +346,7 @@
    * @exception Synchronization_Exception thrown if there is an error starting the thread
    */
   void start() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Change the priority of this Thread. This will change the actual
@@ -411,7 +411,7 @@
    * for a thread to be canceled immediately after this functions returns.
    */
   virtual bool isCanceled() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Set the cancelation and interruption status of this thread.
@@ -419,7 +419,7 @@
    * @exception InvalidOp_Exception thrown if a thread attempts to cancel itself
    */
   virtual void cancel()
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   /**
    * Tests if this thread is a daemon thread.
@@ -439,7 +439,7 @@
    *
    * @exception InvalidOp_Exception thrown if the status cannot be changed.
    */
-  void setDaemon(bool flag) throw(Synchronization_Exception);
+  void setDaemon(bool flag) /* throw(Synchronization_Exception) */;
 
   /** 
    * Put the currently executing thread to sleep for a given amount of
@@ -450,7 +450,7 @@
    * @exception Interrupted_Exception thrown if this wait was interrupt()ed
    */
   static void sleep(unsigned long timeout)
-     throw(Synchronization_Exception);
+     /* throw(Synchronization_Exception) */;
   
   /**
    * Cause the currently executing thread to yield, allowing the scheduler
diff -ur ZThread-2.2.6/include/zthread/ThreadFactory.h ZThread-2.2.6.throwaway/include/zthread/ThreadFactory.h
--- ZThread-2.2.6/include/zthread/ThreadFactory.h	Fri May 31 15:00:19 2002
+++ ZThread-2.2.6.throwaway/include/zthread/ThreadFactory.h	Sun Jun 16 13:34:22 2002
@@ -53,7 +53,7 @@
    * @exception Synchronization_Exception thrown if a new Thread
    * cannot be created.
    */
-  virtual Thread* create() throw(Synchronization_Exception) = 0;
+  virtual Thread* create() /* throw(Synchronization_Exception) */ = 0;
 
 };
  
diff -ur ZThread-2.2.6/include/zthread/ThreadedExecutor.h ZThread-2.2.6.throwaway/include/zthread/ThreadedExecutor.h
--- ZThread-2.2.6/include/zthread/ThreadedExecutor.h	Tue Jun  4 05:14:49 2002
+++ ZThread-2.2.6.throwaway/include/zthread/ThreadedExecutor.h	Sun Jun 16 13:34:15 2002
@@ -71,7 +71,7 @@
    * @see Executor::execute(RunnableHandle&)
    */
   virtual void execute(const RunnableHandle& task)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
     
     // Canceled Executors will not accept new tasks, quick 
     // check to avoid excessive locking in the canceled state
@@ -98,7 +98,7 @@
    * @see Executor::execute(const RunnableHandle&)
    */
   void execute(Runnable* task)
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     execute( RunnablePtr(task) );
 
@@ -108,7 +108,7 @@
    * @see Executor::cancel()
    */
   virtual void cancel() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
       
     Guard<LockType> g(_lock);
     _canceled = true;
@@ -119,7 +119,7 @@
    * @see Executor::isCanceled()
    */
   virtual bool isCanceled()
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
     
     Guard<LockType> g(_lock);
     return _canceled;
@@ -134,7 +134,7 @@
    * @see Executor::wait(unsigned long)
    */
   virtual void wait() 
-    throw(Synchronization_Exception) { 
+    /* throw(Synchronization_Exception) */ {
 
     if(Thread::interrupted())
       throw Interrupted_Exception();
@@ -149,7 +149,7 @@
    * @see Executor::wait(unsigned long)
    */
   virtual bool wait(unsigned long) 
-    throw(Synchronization_Exception) { 
+    /* throw(Synchronization_Exception) */ {
 
     if(Thread::interrupted())
       throw Interrupted_Exception();
diff -ur ZThread-2.2.6/include/zthread/Waitable.h ZThread-2.2.6.throwaway/include/zthread/Waitable.h
--- ZThread-2.2.6/include/zthread/Waitable.h	Tue Jun  4 05:40:39 2002
+++ ZThread-2.2.6.throwaway/include/zthread/Waitable.h	Sun Jun 16 13:36:46 2002
@@ -104,7 +104,7 @@
    * Thrown if the wait cannot be accomplished because of some other error.
    */
   void wait() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
 
   /**
@@ -131,7 +131,7 @@
    * Thrown if the wait cannot be accomplished because of some other error.
    */
   bool wait(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   
 };
diff -ur ZThread-2.2.6/src/Condition.cxx ZThread-2.2.6.throwaway/src/Condition.cxx
--- ZThread-2.2.6/src/Condition.cxx	Thu May 30 14:57:01 2002
+++ ZThread-2.2.6.throwaway/src/Condition.cxx	Sun Jun 16 12:10:19 2002
@@ -31,7 +31,7 @@
 };
 
 Condition::Condition(Lockable& lock)
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   _impl = new FifoConditionImpl(lock);
 
@@ -49,7 +49,7 @@
 
 
 void Condition::wait() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->wait();
 
@@ -58,7 +58,7 @@
 
 
 bool Condition::wait(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->wait(ms);
 
@@ -67,15 +67,15 @@
 
 
 void Condition::signal()
-  throw(Synchronization_Exception) {
-
+  /* throw(Synchronization_Exception) */ {
+  
   _impl->signal();
 
 }
 
 
 void Condition::broadcast()
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->broadcast();
 
diff -ur ZThread-2.2.6/src/ConditionImpl.h ZThread-2.2.6.throwaway/src/ConditionImpl.h
--- ZThread-2.2.6/src/ConditionImpl.h	Sat Jun  1 19:10:03 2002
+++ ZThread-2.2.6.throwaway/src/ConditionImpl.h	Sun Jun 16 12:11:32 2002
@@ -59,7 +59,7 @@
    * allocated
    */
   ConditionImpl(Lockable& predicateLock)   
-    throw(Synchronization_Exception) : _predicateLock(predicateLock) {
+    /* throw(Synchronization_Exception) */ : _predicateLock(predicateLock) {
 
   }
 
@@ -88,7 +88,7 @@
    * Signal the condition variable, waking one thread if any.
    */
   void signal() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<FastLock> g1(_lock);
 
@@ -141,7 +141,7 @@
    * the broadcast.
    */
   void broadcast() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<FastLock> g1(_lock);
 
@@ -195,7 +195,7 @@
    * @exception Synchronization_Exception thrown if there is some other error.
    */
   void wait() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     // Get the monitor for the current thread
     ThreadImpl* self = ThreadImpl::current();
@@ -278,7 +278,7 @@
    * @exception Synchronization_Exception thrown if there is some other error.
    */
   bool wait(unsigned long timeout) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
   
     // Get the monitor for the current thread
     ThreadImpl* self = ThreadImpl::current();
diff -ur ZThread-2.2.6/src/CountingSemaphore.cxx ZThread-2.2.6.throwaway/src/CountingSemaphore.cxx
--- ZThread-2.2.6/src/CountingSemaphore.cxx	Thu May 30 14:44:13 2002
+++ ZThread-2.2.6.throwaway/src/CountingSemaphore.cxx	Sun Jun 16 12:12:48 2002
@@ -28,7 +28,7 @@
 
 
 CountingSemaphore::CountingSemaphore(int initialCount) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   _impl = new FifoSemaphoreImpl(initialCount, 0 , false);
   
@@ -48,13 +48,13 @@
 
 
 void CountingSemaphore::wait() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   _impl->acquire();
 }
 
 
 bool CountingSemaphore::tryWait(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->tryAcquire(ms);
 
@@ -62,7 +62,7 @@
 
 
 void CountingSemaphore::post() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->release();
 
@@ -76,21 +76,21 @@
 }
 
 void CountingSemaphore::acquire() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->acquire();
 
 }
 
 bool CountingSemaphore::tryAcquire(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->tryAcquire(ms);
 
 }
 
 void CountingSemaphore::release() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->release();
 
diff -ur ZThread-2.2.6/src/FastMutex.cxx ZThread-2.2.6.throwaway/src/FastMutex.cxx
--- ZThread-2.2.6/src/FastMutex.cxx	Mon Jun 10 05:09:17 2002
+++ ZThread-2.2.6.throwaway/src/FastMutex.cxx	Sun Jun 16 12:13:33 2002
@@ -25,28 +25,28 @@
 namespace ZThread {
 
 FastMutex::FastMutex() 
-  throw(Synchronization_Exception) : _lock(new FastLock) { }
+  /* throw(Synchronization_Exception) */ : _lock(new FastLock) { }
 
 FastMutex::~FastMutex() 
   throw() { delete _lock; }
 
 
 void FastMutex::acquire() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _lock->acquire();
 
 }
 
 bool FastMutex::tryAcquire(unsigned long timeout) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   return _lock->tryAcquire(timeout);
 
 }
 
 void FastMutex::release() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _lock->release();
 
diff -ur ZThread-2.2.6/src/FastRecursiveMutex.cxx ZThread-2.2.6.throwaway/src/FastRecursiveMutex.cxx
--- ZThread-2.2.6/src/FastRecursiveMutex.cxx	Mon Jun 10 05:09:17 2002
+++ ZThread-2.2.6.throwaway/src/FastRecursiveMutex.cxx	Sun Jun 16 12:14:07 2002
@@ -25,28 +25,28 @@
 namespace ZThread {
 
 FastRecursiveMutex::FastRecursiveMutex() 
-  throw(Synchronization_Exception) : _lock(new FastRecursiveLock) { }
+  /* throw(Synchronization_Exception) */ : _lock(new FastRecursiveLock) { }
 
 FastRecursiveMutex::~FastRecursiveMutex() 
   throw() { delete _lock; }
 
 
 void FastRecursiveMutex::acquire() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _lock->acquire();
 
 }
 
 bool FastRecursiveMutex::tryAcquire(unsigned long timeout) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   return _lock->tryAcquire(timeout);
 
 }
 
 void FastRecursiveMutex::release() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _lock->release();
 
diff -ur ZThread-2.2.6/src/Mutex.cxx ZThread-2.2.6.throwaway/src/Mutex.cxx
--- ZThread-2.2.6/src/Mutex.cxx	Sun Jun  2 05:33:51 2002
+++ ZThread-2.2.6.throwaway/src/Mutex.cxx	Sun Jun 16 12:14:47 2002
@@ -27,7 +27,7 @@
 
 class FifoMutexImpl : public MutexImpl<fifo_list, NullBehavior> { };
 
-Mutex::Mutex() throw(Synchronization_Exception) {
+Mutex::Mutex() /* throw(Synchronization_Exception) */ {
   
   _impl = new FifoMutexImpl();
   
@@ -43,7 +43,7 @@
 
 // P
 void Mutex::acquire() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->acquire(); 
 
@@ -52,7 +52,7 @@
 
 // P
 bool Mutex::tryAcquire(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->tryAcquire(ms); 
 
@@ -60,7 +60,7 @@
 
 // V
 void Mutex::release() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->release(); 
 
diff -ur ZThread-2.2.6/src/MutexImpl.h ZThread-2.2.6.throwaway/src/MutexImpl.h
--- ZThread-2.2.6/src/MutexImpl.h	Sat Jun  1 19:11:06 2002
+++ ZThread-2.2.6.throwaway/src/MutexImpl.h	Sun Jun 16 12:16:29 2002
@@ -125,7 +125,7 @@
    * @exception Synchronization_Exception thrown if there is some other error.
    */
   void acquire() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     ThreadImpl* self = ThreadImpl::current();
     Monitor& m = self->getMonitor();
@@ -210,7 +210,7 @@
    * @exception Synchronization_Exception thrown if there is some other error.
    */
   bool tryAcquire(unsigned long timeout) 
-    throw (Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
   
     ThreadImpl* self = ThreadImpl::current();
     Monitor& m = self->getMonitor();
diff -ur ZThread-2.2.6/src/PriorityCondition.cxx ZThread-2.2.6.throwaway/src/PriorityCondition.cxx
--- ZThread-2.2.6/src/PriorityCondition.cxx	Thu May 30 15:00:54 2002
+++ ZThread-2.2.6.throwaway/src/PriorityCondition.cxx	Sun Jun 16 12:24:57 2002
@@ -31,7 +31,7 @@
 };
 
 PriorityCondition::PriorityCondition(Lockable& lock)
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   _impl = new PriorityConditionImpl(lock);
 
@@ -49,7 +49,7 @@
 
 
 void PriorityCondition::wait() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->wait();
 
@@ -58,7 +58,7 @@
 
 
 bool PriorityCondition::wait(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->wait(ms);
 
@@ -67,7 +67,7 @@
 
 
 void PriorityCondition::signal()
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->signal();
 
@@ -75,7 +75,7 @@
 
 
 void PriorityCondition::broadcast()
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->broadcast();
 
diff -ur ZThread-2.2.6/src/PriorityInheritanceMutex.cxx ZThread-2.2.6.throwaway/src/PriorityInheritanceMutex.cxx
--- ZThread-2.2.6/src/PriorityInheritanceMutex.cxx	Sun Jun  2 05:33:26 2002
+++ ZThread-2.2.6.throwaway/src/PriorityInheritanceMutex.cxx	Sun Jun 16 12:17:13 2002
@@ -69,7 +69,7 @@
     public MutexImpl<priority_list, InheritPriorityBehavior> { };
 
 PriorityInheritanceMutex::PriorityInheritanceMutex() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   _impl = new PriorityInheritanceMutexImpl();
   
@@ -85,7 +85,7 @@
 
 // P
 void PriorityInheritanceMutex::acquire() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->acquire(); 
 
@@ -94,7 +94,7 @@
 
 // P
 bool PriorityInheritanceMutex::tryAcquire(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->tryAcquire(ms); 
 
@@ -102,7 +102,7 @@
 
 // V
 void PriorityInheritanceMutex::release() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->release(); 
 
diff -ur ZThread-2.2.6/src/PriorityMutex.cxx ZThread-2.2.6.throwaway/src/PriorityMutex.cxx
--- ZThread-2.2.6/src/PriorityMutex.cxx	Sun Jun  2 05:33:38 2002
+++ ZThread-2.2.6.throwaway/src/PriorityMutex.cxx	Sun Jun 16 12:17:31 2002
@@ -29,7 +29,7 @@
 class PriorityMutexImpl : public MutexImpl<priority_list, NullBehavior> { };
 
 PriorityMutex::PriorityMutex() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   _impl = new PriorityMutexImpl();
   
@@ -45,7 +45,7 @@
 
 // P
 void PriorityMutex::acquire() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->acquire(); 
 
@@ -54,7 +54,7 @@
 
 // P
 bool PriorityMutex::tryAcquire(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->tryAcquire(ms); 
 
@@ -62,7 +62,7 @@
 
 // V
 void PriorityMutex::release() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->release(); 
 
diff -ur ZThread-2.2.6/src/PrioritySemaphore.cxx ZThread-2.2.6.throwaway/src/PrioritySemaphore.cxx
--- ZThread-2.2.6/src/PrioritySemaphore.cxx	Thu May 30 15:13:29 2002
+++ ZThread-2.2.6.throwaway/src/PrioritySemaphore.cxx	Sun Jun 16 12:17:47 2002
@@ -28,7 +28,7 @@
 class PrioritySemaphoreImpl : public SemaphoreImpl<priority_list> { 
 public:
 
-  PrioritySemaphoreImpl(int count, unsigned int maxCount) throw(Synchronization_Exception) 
+  PrioritySemaphoreImpl(int count, unsigned int maxCount) /* throw(Synchronization_Exception) */ 
     : SemaphoreImpl<priority_list>(count, maxCount, true) { }
 
 };
@@ -40,7 +40,7 @@
  * @param maxCount maximum size of the semaphore count
  */
 PrioritySemaphore::PrioritySemaphore(int count, unsigned int maxCount) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   _impl = new PrioritySemaphoreImpl(count, maxCount);
   
@@ -55,7 +55,7 @@
 }
 
 void PrioritySemaphore::wait() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->acquire();
 
@@ -63,14 +63,14 @@
 
 
 bool PrioritySemaphore::tryWait(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->tryAcquire(ms);
 
 }
 
 void PrioritySemaphore::post() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->release();
 
@@ -88,14 +88,14 @@
 //
 
 void PrioritySemaphore::acquire() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->acquire();
 
 }
 
 bool PrioritySemaphore::tryAcquire(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->tryAcquire(ms);
 
@@ -103,7 +103,7 @@
 }
 
 void PrioritySemaphore::release() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->release();
 
diff -ur ZThread-2.2.6/src/RWLock.cxx ZThread-2.2.6.throwaway/src/RWLock.cxx
--- ZThread-2.2.6/src/RWLock.cxx	Tue May 28 06:43:23 2002
+++ ZThread-2.2.6.throwaway/src/RWLock.cxx	Sun Jun 16 12:18:22 2002
@@ -34,7 +34,7 @@
 /**
  * Initialize a new RWLock
  */
-RWLock::RWLock() throw(Synchronization_Exception) 
+RWLock::RWLock() /* throw(Synchronization_Exception) */ 
   : _condRead(_mtxLock), _condWrite(_mtxLock), _fairnessCounter(0) {
   
   _activeReaders = _activeWriters = 0;
@@ -114,7 +114,7 @@
  * operation is interrupted prematurely
  */
 void RWLock::beforeRead() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
       
   Guard<FastMutex> guard(_mtxLock); // Serialize access to this method
       
@@ -145,7 +145,7 @@
 }
 
 bool RWLock::beforeRead(unsigned long milliseconds) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
       
   Guard<FastMutex> guard(); // Serialize access to this method
   bool result = false;
@@ -181,7 +181,7 @@
  * Called after the read operation has been performed
  */ 
 void RWLock::postRead()
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
       
   Guard<FastMutex> guard(_mtxLock); // Serialize access to this method
       
@@ -197,7 +197,7 @@
  * Called before a write operation is attempted
  */
 void RWLock::beforeWrite() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   Guard<FastMutex> guard(_mtxLock); // Serialize access to this method
   
@@ -225,7 +225,7 @@
 }
 
 bool RWLock::beforeWrite(unsigned long milliseconds) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   Guard<FastMutex> guard(_mtxLock); // Serialize access to this method
   bool result = false;
@@ -259,7 +259,7 @@
  */
 
 void RWLock::postWrite()
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   Guard<FastMutex> guard(_mtxLock); // Serialize access to this method
   
diff -ur ZThread-2.2.6/src/RecursiveMutex.cxx ZThread-2.2.6.throwaway/src/RecursiveMutex.cxx
--- ZThread-2.2.6/src/RecursiveMutex.cxx	Tue May 28 06:41:14 2002
+++ ZThread-2.2.6.throwaway/src/RecursiveMutex.cxx	Sun Jun 16 12:18:40 2002
@@ -26,7 +26,7 @@
 namespace ZThread {
 
 RecursiveMutex::RecursiveMutex() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   _impl = new RecursiveMutexImpl();
   
@@ -42,7 +42,7 @@
 
 
 void RecursiveMutex::acquire() 
-  throw(Synchronization_Exception){
+  /* throw(Synchronization_Exception) */{
 
   _impl->acquire(); 
 
@@ -50,14 +50,14 @@
 
 
 bool RecursiveMutex::tryAcquire(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->tryAcquire(ms); 
 
 }
 
 void RecursiveMutex::release() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->release(); 
 
diff -ur ZThread-2.2.6/src/RecursiveMutexImpl.cxx ZThread-2.2.6.throwaway/src/RecursiveMutexImpl.cxx
--- ZThread-2.2.6/src/RecursiveMutexImpl.cxx	Sat Jun  1 19:12:22 2002
+++ ZThread-2.2.6.throwaway/src/RecursiveMutexImpl.cxx	Sun Jun 16 12:19:28 2002
@@ -39,7 +39,7 @@
  * properly allocated
  */
 RecursiveMutexImpl::RecursiveMutexImpl() 
-  throw(Synchronization_Exception) : _owner(0), _count(0) {
+  /* throw(Synchronization_Exception) */ : _owner(0), _count(0) {
  
 }
 
@@ -72,7 +72,7 @@
 
 
 void RecursiveMutexImpl::acquire() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   // Get the monitor for the current thread
   Monitor& m = ThreadImpl::current()->getMonitor();
@@ -144,7 +144,7 @@
 }
 
 bool RecursiveMutexImpl::tryAcquire(unsigned long timeout) 
-  throw (Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   // Get the monitor for the current thread
   Monitor& m = ThreadImpl::current()->getMonitor();
@@ -227,7 +227,7 @@
 }
 
 void RecursiveMutexImpl::release() 
-  throw (Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   // Get the monitor for the current thread
   Monitor& m = ThreadImpl::current()->getMonitor();
diff -ur ZThread-2.2.6/src/RecursiveMutexImpl.h ZThread-2.2.6.throwaway/src/RecursiveMutexImpl.h
--- ZThread-2.2.6/src/RecursiveMutexImpl.h	Mon May 27 04:11:49 2002
+++ ZThread-2.2.6.throwaway/src/RecursiveMutexImpl.h	Sun Jun 16 12:20:22 2002
@@ -60,19 +60,19 @@
   public:
    
   RecursiveMutexImpl() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   virtual ~RecursiveMutexImpl()
     throw();
   
   void acquire() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   bool tryAcquire(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   void release() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
 }; /* RecursiveMutexImpl */
 
diff -ur ZThread-2.2.6/src/Semaphore.cxx ZThread-2.2.6.throwaway/src/Semaphore.cxx
--- ZThread-2.2.6/src/Semaphore.cxx	Thu May 30 14:42:39 2002
+++ ZThread-2.2.6.throwaway/src/Semaphore.cxx	Sun Jun 16 12:20:48 2002
@@ -31,7 +31,7 @@
  * @param maxCount maximum size of the semaphore count
  */
 Semaphore::Semaphore(int count, unsigned int maxCount) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   _impl = new FifoSemaphoreImpl(count, maxCount, true);
   
@@ -46,7 +46,7 @@
 }
 
 void Semaphore::wait() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->acquire();
 
@@ -54,14 +54,14 @@
 
 
 bool Semaphore::tryWait(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->tryAcquire(ms);
 
 }
 
 void Semaphore::post() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->release();
 
@@ -79,14 +79,14 @@
 //
 
 void Semaphore::acquire() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->acquire();
 
 }
 
 bool Semaphore::tryAcquire(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->tryAcquire(ms);
 
@@ -94,7 +94,7 @@
 }
 
 void Semaphore::release() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->release();
 
diff -ur ZThread-2.2.6/src/SemaphoreImpl.h ZThread-2.2.6.throwaway/src/SemaphoreImpl.h
--- ZThread-2.2.6/src/SemaphoreImpl.h	Sat Jun  1 19:09:43 2002
+++ ZThread-2.2.6.throwaway/src/SemaphoreImpl.h	Sun Jun 16 12:21:26 2002
@@ -75,7 +75,8 @@
    * properly allocated
    */
   SemaphoreImpl(int count, unsigned int maxCount, bool checked) 
-    throw(Synchronization_Exception) : _count(count), _maxCount(maxCount), _checked(checked), _entryCount(0) { }
+    /* throw(Synchronization_Exception) */ 
+    : _count(count), _maxCount(maxCount), _checked(checked), _entryCount(0) { }
 
   /**
    * Destroy this SemaphoreImpl and release its resources. 
@@ -103,7 +104,7 @@
    * @exception Synchronization_Exception thrown if there is some other error.
    */
   void acquire() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     // Get the monitor for the current thread
     ThreadImpl* self = ThreadImpl::current();
@@ -171,7 +172,7 @@
    * @exception Synchronization_Exception thrown if there is some other error.
    */
   bool tryAcquire(unsigned long timeout) 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
  
     // Get the monitor for the current thread
     ThreadImpl* self = ThreadImpl::current();
@@ -249,7 +250,7 @@
    * the checked flag is set.
    */
   void release() 
-    throw(Synchronization_Exception) {
+    /* throw(Synchronization_Exception) */ {
 
     Guard<FastLock> g1(_lock);
 
@@ -326,7 +327,8 @@
 public:
 
   FifoSemaphoreImpl(int count, unsigned int maxCount, bool checked) 
-    throw(Synchronization_Exception) : SemaphoreImpl<fifo_list>(count, maxCount, checked) { }
+    /* throw(Synchronization_Exception) */
+    : SemaphoreImpl<fifo_list>(count, maxCount, checked) { }
 
 };
 
diff -ur ZThread-2.2.6/src/Thread.cxx ZThread-2.2.6.throwaway/src/Thread.cxx
--- ZThread-2.2.6/src/Thread.cxx	Mon Jun  3 15:21:01 2002
+++ ZThread-2.2.6.throwaway/src/Thread.cxx	Sun Jun 16 12:22:58 2002
@@ -94,7 +94,7 @@
   //ThreadLocal<void*> Thread::_interruptKey;
 
 Thread::Thread() 
-  throw(Synchronization_Exception) : _impl(new ThreadImpl) { }
+  /* throw(Synchronization_Exception) */ : _impl(new ThreadImpl) { }
 
 Thread::~Thread() 
   throw() {
@@ -105,7 +105,7 @@
 }
 
 bool Thread::join(unsigned long timeout) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->join(timeout);
 
@@ -114,14 +114,14 @@
 void Thread::run() throw() { /* NOOP */ }
 
 void Thread::start() 
-  throw (Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   run( RunnablePtr(*this) );
 
 }
 
 void Thread::run(const RunnableHandle& task)
-  throw (Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _impl->run(task);
 
@@ -173,7 +173,7 @@
 }
   
 void Thread::cancel() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   if(ThreadImpl::current() == _impl)
     throw InvalidOp_Exception();
@@ -183,7 +183,7 @@
 } 
 
 bool Thread::isCanceled() 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   return _impl->isCanceled();
 
@@ -196,7 +196,7 @@
 }
 
 void Thread::setDaemon(bool flag)
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   // Throw right away if a thread tries to set its own daemon
   // status.
@@ -209,7 +209,7 @@
 
 
 void Thread::sleep(unsigned long ms) 
- throw(Synchronization_Exception) {
+ /* throw(Synchronization_Exception) */ {
 
   ThreadImpl::sleep(ms);
 
diff -ur ZThread-2.2.6/src/ThreadImpl.cxx ZThread-2.2.6.throwaway/src/ThreadImpl.cxx
--- ZThread-2.2.6/src/ThreadImpl.cxx	Mon Jun  3 15:03:41 2002
+++ ZThread-2.2.6.throwaway/src/ThreadImpl.cxx	Sun Jun 16 12:23:28 2002
@@ -41,7 +41,7 @@
 public:
   
   Launcher(ThreadImpl* a, ThreadImpl* b, const RunnableHandle& c) : x(a), y(b), z(c) {}
-  virtual ~Launcher() throw () {}
+  virtual ~Launcher() throw() {}
   
   virtual void run() throw() {
     
@@ -55,7 +55,7 @@
  * Initialize a new ThreadImpl object, giving it a default priority.
  */
 ThreadImpl::ThreadImpl() 
-  throw(Synchronization_Exception) : _joiner(0), _priority(Medium) {
+  /* throw(Synchronization_Exception) */ : _joiner(0), _priority(Medium) {
 
   ZTDEBUG("Thread created.\n");
 
@@ -86,7 +86,7 @@
  * joined.
  */
 bool ThreadImpl::join(unsigned long timeout) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   _monitor.acquire();
   
@@ -232,7 +232,7 @@
  * Thread must be in the IDLE state for this to be successful.
  */
 void ThreadImpl::setDaemon(bool flag)
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
   
   Guard<Monitor> g(_monitor);
 
@@ -292,7 +292,7 @@
  * variable. This can be signaled in the monitor of an interrupt
  */
 void ThreadImpl::sleep(unsigned long ms) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   // Make sleep()ing for 0 milliseconds equivalent to a yield.
   if(ms == 0) {
@@ -350,7 +350,7 @@
 }
 
 void ThreadImpl::run(const RunnableHandle& task) 
-  throw(Synchronization_Exception) {
+  /* throw(Synchronization_Exception) */ {
 
   Guard<Monitor> g1(_monitor);
 
diff -ur ZThread-2.2.6/src/ThreadImpl.h ZThread-2.2.6.throwaway/src/ThreadImpl.h
--- ZThread-2.2.6/src/ThreadImpl.h	Mon Jun  3 12:39:01 2002
+++ ZThread-2.2.6.throwaway/src/ThreadImpl.h	Sun Jun 16 12:23:44 2002
@@ -65,7 +65,7 @@
 
   //! Create a new ThreadImpl
   ThreadImpl() 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   //! Destroy a new ThreadImpl
   ~ThreadImpl() throw();  
@@ -108,10 +108,10 @@
 
   
   bool join(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
   
   void run(const RunnableHandle& task) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   void setPriority(Priority);
 
@@ -125,10 +125,10 @@
   }
 
   void setDaemon(bool) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   static void sleep(unsigned long) 
-    throw(Synchronization_Exception);
+    /* throw(Synchronization_Exception) */;
 
   static void yield() throw();
   
